#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>

typedef struct {
    int *array;
    int size;
} ThreadData;

void bubble_sort(int *array, int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (array[j] > array[j + 1]) {
                int temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }
}

void* thread_sort(void *arg) {
    ThreadData *data = (ThreadData*)arg;
    bubble_sort(data->array, data->size);
    pthread_exit(NULL);
}

void merge(int *array, int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = array[l + i];
    for (j = 0; j < n2; j++)
        R[j] = array[m + 1 + j];

    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            array[k] = L[i];
            i++;
        } else {
            array[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        array[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        array[k] = R[j];
        j++;
        k++;
    }
}

int main() {
    int num_threads;
    int array_size;

    printf("Введите количество потоков: ");
    scanf("%d", &num_threads);

    if (num_threads <= 0) {
        printf("Неверное количество потоков\n");
        return 1;
    }

    printf("Введите размер массива: ");
    scanf("%d", &array_size);

    if (array_size <= 0) {
        printf("Неверный размер массива\n");
        return 1;
    }

    int *array = (int*)malloc(array_size * sizeof(int));

    srand(time(NULL));
    for (int i = 0; i < array_size; i++) {
        array[i] = rand() % 100000;
    }

    pthread_t threads[num_threads];
    ThreadData thread_data[num_threads];

    int chunk_size = array_size / num_threads;

    clock_t start_time = clock();

    for (int i = 0; i < num_threads; i++) {
        thread_data[i].array = &array[i * chunk_size];
        thread_data[i].size = (i == num_threads - 1) ? (array_size - i * chunk_size) : chunk_size;
        pthread_create(&threads[i], NULL, thread_sort, (void*)&thread_data[i]);
    }

    for (int i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
    }

    for (int i = 1; i < num_threads; i++) {
        merge(array, 0, i * chunk_size - 1, (i + 1) * chunk_size - 1);
    }

    clock_t end_time = clock();
    double execution_time = (double)(end_time - start_time) / CLOCKS_PER_SEC; 

    printf("Время выполнения: %.6f секунд\n", execution_time);

    printf("Отсортированный массив:\n");
    for (int i = 0; i < array_size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");

    free(array);

    return 0;
}
